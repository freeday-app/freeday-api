# /api/users/{uuid}

get:
  tags:
    - 'Users'
  summary: 'Gets user information'
  description: ''
  parameters:
    - name: 'userId'
      required: true
      in: 'path'
      schema:
        type : 'string'
        format: 'uuid'
  responses:
    200:
      content:
        application/json:
          schema:
            $ref: '../../schemas/users.yaml#/User'
    400:
      $ref: '../../responses/errors.yaml#/ValidationError'
    401:
      $ref: '../../responses/errors.yaml#/AuthenticationError'
    404:
      $ref: '../../responses/errors.yaml#/NotFoundError'
    500:
      $ref: '../../responses/errors.yaml#/InternError'

post:
  tags:
    - 'Users'
  summary: 'Edits a new user'
  description: ''
  parameters:
    - name: 'userId'
      required: true
      in: 'path'
      schema:
        type : 'string'
        format: 'uuid'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../../schemas/users.yaml#/UserEdit'
  responses:
    200:
      content:
        application/json:
          schema:
            $ref: '../../schemas/users.yaml#/User'
    400:
      $ref: '../../responses/errors.yaml#/ValidationError'
    401:
      $ref: '../../responses/errors.yaml#/AuthenticationError'
    404:
      $ref: '../../responses/errors.yaml#/NotFoundError'
    409:
      $ref: '../../responses/errors.yaml#/ConflictError'
    500:
      $ref: '../../responses/errors.yaml#/InternError'

delete:
  tags:
    - 'Users'
  summary: 'Deletes a user'
  description: ''
  parameters:
    - name: 'userId'
      required: true
      in: 'path'
      schema:
        type : 'string'
        format: 'uuid'
  responses:
    200:
      content:
        application/json:
          schema:
            type: 'object'
    400:
      $ref: '../../responses/errors.yaml#/ValidationError'
    401:
      $ref: '../../responses/errors.yaml#/AuthenticationError'
    500:
      $ref: '../../responses/errors.yaml#/InternError'
